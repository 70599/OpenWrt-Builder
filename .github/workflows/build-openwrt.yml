#
# Copyright (c) 2019-2020 P3TERX <https://p3terx.com>
#
# This is free software, licensed under the MIT License.
# See /LICENSE for more information.
#
# https://github.com/P3TERX/Actions-OpenWrt
# Description: Build OpenWrt using GitHub Actions
#

name: Build OpenWrt

on:
  repository_dispatch:
  workflow_dispatch:
    inputs:
      target:
        description: 'Target image'
        required: true
        default: '[r4s],r4s_no-docker,r4s_rootfs,x86,k3'
      repo:
        description: 'Source code repo'
        required: true
        default: '[coolsnowwolf/lede],Lienol/openwrt,friendlyarm/friendlywrt'
      upload_bin_dir:
        description: 'Upload bin dir?'
        required: true
        default: '[yes],no'
      upload_firmware:
        description: 'Upload firmware?'
        required: true
        default: 'yes,[no]'
      upload_cowtransfer:
        description: 'Upload to Cowtransfer?'
        required: true
        default: 'yes,[no]'
      upload_wetransfer:
        description: 'Upload to Wetransfer?'
        required: true
        default: '[yes],no'

env:
  REPO_URL: https://github.com/${{ github.event.inputs.repo }}
  FEEDS_CONF: feeds.conf
  CONFIG_FILE: ${{ github.event.inputs.target }}.config
  DIY_P1_SH: diy-part1.sh
  DIY_P2_SH: diy-part2.sh
  UPLOAD_COWTRANSFER: ${{ github.event.inputs.upload_cowtransfer }}
  UPLOAD_WETRANSFER: ${{ github.event.inputs.upload_wetransfer }}
  UPLOAD_RELEASE: false
  TZ: Asia/Shanghai

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout
      uses: actions/checkout@main

    - name: Initialization environment
      env:
        DEBIAN_FRONTEND: noninteractive
      run: |
        sudo rm -rf /etc/apt/sources.list.d/* /usr/share/dotnet /usr/local/lib/android /opt/ghc
        sudo -E apt-get -qq update
        sudo -E apt-get -qq install build-essential asciidoc binutils bzip2 gawk gettext git libncurses5-dev libz-dev patch python3 python2.7 unzip zlib1g-dev lib32gcc1 libc6-dev-i386 subversion flex uglifyjs git-core gcc-multilib p7zip p7zip-full msmtp libssl-dev texinfo libglib2.0-dev xmlto qemu-utils upx libelf-dev autoconf automake libtool autopoint device-tree-compiler g++-multilib antlr3 gperf wget curl swig rsync aria2 tree
        sudo -E apt-get -qq autoremove --purge
        sudo -E apt-get -qq clean
        sudo timedatectl set-timezone "$TZ"
        sudo mkdir -p /workdir
        sudo chown $USER:$GROUPS /workdir

    - name: Clone source code
      working-directory: /workdir
      run: |
        df -hT $PWD
        BRANCH='master'
        if [ ${{ github.event.inputs.repo }} == 'Lienol/openwrt' ]; then
          BRANCH='22.03'
        fi
        git clone --depth 1 -b $BRANCH $REPO_URL openwrt
        ln -sf /workdir/openwrt $GITHUB_WORKSPACE/openwrt

    - name: Load custom feeds
      run: |
        [ -e $FEEDS_CONF ] && cp -f $FEEDS_CONF openwrt/feeds.conf
        chmod +x $DIY_P1_SH
        cd openwrt
        $GITHUB_WORKSPACE/$DIY_P1_SH

    - name: Update feeds
      run: cd openwrt && ./scripts/feeds update -a

    - name: Install feeds
      run: cd openwrt && ./scripts/feeds install -a

    - name: Load custom configuration
      run: |
        [ -e files ] && cp -r files openwrt/files
        [ -e $CONFIG_FILE ] && cp $CONFIG_FILE openwrt/.config
        chmod +x $DIY_P2_SH
        cd openwrt
        $GITHUB_WORKSPACE/$DIY_P2_SH
        echo "${{ secrets.SSH_PUBLIC_KEY }}" >> $GITHUB_WORKSPACE/openwrt/files/root/.ssh/authorized_keys

    - name: Cache dl dir
      id: cache-dl-dir
      uses: actions/cache@v2.1.6
      with:
        path: openwrt/dl
        key: ${{ runner.os }}-${{ github.event.inputs.target }}-${{ github.event.inputs.repo }}-dl-${{ hashFiles('cache_ver') }}

    - name: Download package
      if: steps.cache-dl-dir.outputs.cache-hit != 'true'
      id: package
      run: |
        cd openwrt
        make defconfig
        make download -j8
        find dl -size -1024c -exec ls -l {} \;
        find dl -size -1024c -exec rm -f {} \;

    - name: Cache build_dir
      id: cache-build_dir
      uses: actions/cache@v2.1.6
      with:
        path: openwrt/build_dir
        key: ${{ runner.os }}-${{ github.event.inputs.target }}-${{ github.event.inputs.repo }}-build_dir-${{ hashFiles('cache_ver') }}

    - name: Cache staging_dir
      id: cache-staging_dir
      uses: actions/cache@v2.1.6
      with:
        path: openwrt/staging_dir
        key: ${{ runner.os }}-${{ github.event.inputs.target }}-${{ github.event.inputs.repo }}-staging_dir-${{ hashFiles('cache_ver') }}

    - name: Cache toolchain
      id: cache-toolchain
      uses: actions/cache@v2.1.6
      with:
        path: openwrt/toolchain
        key: ${{ runner.os }}-${{ github.event.inputs.target }}-${{ github.event.inputs.repo }}-toolchain-${{ hashFiles('cache_ver') }}

    - name: Cache tmp
      id: cache-tmp
      uses: actions/cache@v2.1.6
      with:
        path: openwrt/tmp
        key: ${{ runner.os }}-${{ github.event.inputs.target }}-${{ github.event.inputs.repo }}-tmp-${{ hashFiles('cache_ver') }}

    - name: Compile the firmware
      id: compile
      run: |
        cd openwrt
        echo -e "$(nproc) thread compile"
        make -j $(($(nproc) + 1)) || make -j1 V=s || \
        curl \
          --data parse_mode=HTML \
          --data chat_id=${{ secrets.TELEGRAM_CHAT_ID }} \
          --data text="<b>‚ùå [${{ github.event.inputs.target }}] Âõ∫‰ª∂ÁºñËØëÂ§±Ë¥•</b>" \
          --request POST https://api.telegram.org/bot${{ secrets.TELEGRAM_BOT_TOKEN }}/sendMessage
        echo "::set-output name=status::success"
        grep '^CONFIG_TARGET.*DEVICE.*=y' .config | sed -r 's/.*DEVICE_(.*)=y/\1/' > DEVICE_NAME
        [ -s DEVICE_NAME ] && echo "DEVICE_NAME=_$(cat DEVICE_NAME)" >> $GITHUB_ENV
        echo "FILE_DATE=_$(date +"%Y-%m-%d-%H%M")" >> $GITHUB_ENV

    - name: Check space usage
      if: (!cancelled())
      run: df -hT

    - name: Upload bin directory
      uses: actions/upload-artifact@main
      if: steps.compile.outputs.status == 'success' && ${{ github.event.inputs.upload_bin_dir }} == 'yes'
      with:
        name: OpenWrt_bin_${{ github.event.inputs.target }}${{ env.FILE_DATE }}
        path: openwrt/bin

    - name: Organize files
      id: organize
      if: ${{ github.event.inputs.upload_firmware }} == 'yes' && !cancelled()
      run: |
        cd openwrt/bin/targets/*/*
        rm -rf packages
        echo "FIRMWARE=$PWD" >> $GITHUB_ENV
        echo "::set-output name=status::success"

    - name: Upload firmware directory
      uses: actions/upload-artifact@main
      if: steps.organize.outputs.status == 'success' && !cancelled()
      with:
        name: OpenWrt_firmware_${{ github.event.inputs.target }}${{ env.FILE_DATE }}
        path: ${{ env.FIRMWARE }}

    - name: Upload firmware to cowtransfer
      id: cowtransfer
      if: steps.organize.outputs.status == 'success' && env.UPLOAD_COWTRANSFER == 'yes' && !cancelled()
      run: |
        curl -fsSL git.io/file-transfer | sh
        ./transfer cow --block 2621440 -s -p 64 --no-progress ${FIRMWARE} 2>&1 | tee cowtransfer.log
        echo "::warning file=cowtransfer.com::$(cat cowtransfer.log | grep https)"
        echo "::set-output name=url::$(cat cowtransfer.log | grep https | cut -f3 -d" ")"

    - name: Upload firmware to WeTransfer
      id: wetransfer
      if: steps.organize.outputs.status == 'success' && env.UPLOAD_WETRANSFER == 'yes' && !cancelled()
      run: |
        curl -fsSL git.io/file-transfer | sh
        ./transfer wet -s -p 16 --no-progress ${FIRMWARE} 2>&1 | tee wetransfer.log
        echo "::warning file=wetransfer.com::$(cat wetransfer.log | grep https)"
        echo "::set-output name=url::$(cat wetransfer.log | grep https | cut -f3 -d" ")"

    - name: Generate release tag
      id: tag
      if: env.UPLOAD_RELEASE == 'true' && !cancelled()
      run: |
        echo "::set-output name=release_tag::$(date +"%Y.%m.%d-%H%M")"
        touch release.txt
        [ $UPLOAD_COWTRANSFER == 'yes' ] && echo "üîó [Cowtransfer](${{ steps.cowtransfer.outputs.url }})" >> release.txt
        [ $UPLOAD_WETRANSFER == 'yes' ] && echo "üîó [WeTransfer](${{ steps.wetransfer.outputs.url }})" >> release.txt
        echo "::set-output name=status::success"

    - name: Upload firmware to release
      uses: softprops/action-gh-release@v1
      if: steps.tag.outputs.status == 'success' && !cancelled()
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ steps.tag.outputs.release_tag }}
        body_path: release.txt
        files: ${{ env.FIRMWARE }}/*

    - name: Send complete notification
      if: steps.organize.outputs.status == 'success'
      run: |
        TITLE="<b>‚úÖ [${{ github.event.inputs.target }}] Âõ∫‰ª∂ÁºñËØëÂÆåÊàê</b>"
        if [ $UPLOAD_COWTRANSFER == 'yes' ]; then
          MESSAGE="üîó <a href='${{ steps.cowtransfer.outputs.url }}'>Cowtransfer</a>"
        fi
        if [ $UPLOAD_WETRANSFER == 'yes' ]; then
          MESSAGE="üîó <a href='${{ steps.wetransfer.outputs.url }}'>WeTransfer</a>"
        fi
        curl \
          --data parse_mode=HTML \
          --data disable_web_page_preview=true \
          --data chat_id=${{ secrets.TELEGRAM_CHAT_ID }} \
          --data text="$TITLE%0A$MESSAGE" \
          --request POST https://api.telegram.org/bot${{ secrets.TELEGRAM_BOT_TOKEN }}/sendMessage

    - name: Remove old Releases
      uses: dev-drprasad/delete-older-releases@v0.1.0
      if: env.UPLOAD_RELEASE == 'true' && !cancelled()
      with:
        keep_latest: 3
        delete_tags: true
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
